
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Load all libraries and functions
> 
> libs <- c(
+     'RColorBrewer',
+     'ggplot2',
+     'xgboost',
+     'glmnet',
+     'dplyr',
+     'tidyr',
+     'pROC',
+     'ROCR',
+     'stringr',
+     'caret',
+     'caTools',
+     'fst'
+ )
> 
> for (lib in libs) {
+     if (!require(lib, character.only = TRUE, quietly = TRUE)) {
+         install.packages(lib, repos='http://cran.us.r-project.org')
+     }
+ }
Loaded glmnet 2.0-12


Attaching package: ‘dplyr’

The following object is masked from ‘package:xgboost’:

    slice

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘tidyr’

The following object is masked from ‘package:Matrix’:

    expand

Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following object is masked from ‘package:glmnet’:

    auc

The following objects are masked from ‘package:stats’:

    cov, smooth, var


Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> 
> (.packages())
 [1] "fst"          "caTools"      "caret"        "lattice"      "stringr"     
 [6] "ROCR"         "gplots"       "pROC"         "tidyr"        "dplyr"       
[11] "glmnet"       "foreach"      "Matrix"       "xgboost"      "ggplot2"     
[16] "RColorBrewer" "stats"        "graphics"     "grDevices"    "utils"       
[21] "datasets"     "methods"      "base"        
> 
> source("../my_R_functions/utility_functions.R")
> source("../my_R_functions/stat_functions.R")
> source("../my_R_functions/plot_functions.R")
> source("/ssd/mrichard/github/BDDS/trenadb/src/utils.R")
Loading required package: DBI
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:Matrix’:

    colMeans, colSums, rowMeans, rowSums, which

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:caTools’:

    runmean

The following object is masked from ‘package:gplots’:

    space

The following object is masked from ‘package:tidyr’:

    expand

The following objects are masked from ‘package:dplyr’:

    first, rename

The following object is masked from ‘package:Matrix’:

    expand

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

The following object is masked from ‘package:xgboost’:

    slice

Loading required package: GenomeInfoDb
> source("/ssd/mrichard/github/BDDS/footprints/testdb/src/dbFunctions.R")
> 
> # Load the motif data and the big dataset, plus make the names better
> load("../Rdata_files/motif_class_pairs.Rdata")
> #load("/ssd/mrichard/data/joined.annotated.9.Rdata") # Takes ~2 min to load
> all.TF.df.fimo.hint.well.annotated <- read.fst("/ssd/mrichard/data/joined.annotated.10M.Rdata")
> colnames(all.TF.df.fimo.hint.well.annotated) <- make.names(colnames(all.TF.df.fimo.hint.well.annotated), unique=TRUE)
> 
> # Filter the entries w/o fp or hits
> all.TF.df.fimo.hint.well.annotated %>%
+     filter(h_frac_16 > 0 | w_frac_16 > 0 | h_frac_20 > 0 | w_frac_20 > 0 | cs_hit > 0) ->
+         df_only_footprint_hits
> 
> 
> # Remove columns we don't need for this part, then drop the original data
> # Include the HINT/Wellington columns
> cols_to_drop <- c('motifname', 'chrom', 'strand', 'loc',
+                   'h_frac_16', 'h_frac_20', 'h_max_score_16', 'h_max_score_20',
+                   'w_frac_16', 'w_frac_20', 'w_min_score_16', 'w_min_score_20')
> 
> df_only_footprint_hits %>%
+     filter(chrom %in% c("2","4")) %>%
+     select(-one_of(cols_to_drop)) ->
+     val_df
> 
> df_only_footprint_hits %>%
+     filter(chrom %in% c("1","3","5")) %>%
+     select(-one_of(cols_to_drop)) ->
+     test_df
> 
> df_only_footprint_hits %>%
+     filter(!(chrom %in% c("1","2","3","4","5"))) %>%
+     select(-one_of(cols_to_drop)) ->
+     train_df
> 
> remove(df_only_footprint_hits, all.TF.df.fimo.hint.well.annotated)
> 
> # Divide into train/test/validation sets and split X/Y
> val_df %>%
+     select(-cs_hit) %>%
+     as.matrix ->
+     X_val
> 
> val_df %>%
+     select(cs_hit) %>%
+     as.matrix ->
+     y_val
> 
> test_df %>%
+     select(-cs_hit) %>%
+     as.matrix ->
+     X_test
> 
> test_df %>%
+     select(cs_hit) %>%
+     as.matrix ->
+     y_test
> 
> train_df %>%
+     select(-cs_hit) %>%
+     as.matrix ->
+     X_train
> 
> train_df %>%
+     select(cs_hit) %>%
+     as.matrix ->
+     y_train
> 
> remove(val_df, test_df, train_df)
> 
> # MODEL 1: GBM
> param <- list("objective" = "binary:logistic",
+               "max.depth" = 7,
+               "eta" = 0.005,
+               "eval.metric" = "auc"
+               )
> 
> gbdt_medium <- xgboost(
+             params = param,
+             data = X_train,
+             label = y_train,
+             nround = 200,
+             verbose = FALSE,
+             missing = NA
+         )
> 
> gbdt_medium$Model.Name <- "trees with classes"
> xgb.save(gbdt_medium, "../saved_models/xgboost_TF_site_predict_motif_only.10M.model")
[1] TRUE
> 
> # Create importance matrix plot
> motif.class$class <- lapply(motif.class$class, make.names, unique=TRUE)
> importance_matrix <- xgb.importance(colnames(X_train),model=gbdt_medium)
> df <- as_data_frame(importance_matrix)
> df.tf <- subset(df, Feature %in% unique(motif.class$class))
> df.notf <- subset(df, !(Feature %in% unique(motif.class$class)))
> tfclass.row <- c("TF_class", unname(as.list(colSums(df.tf[!(colnames(df.tf) %in% c("Feature"))]))) )
> names(tfclass.row) <- colnames(df)
> df.sum <- rbind(df.notf,tfclass.row)
> 
> 
> png("../figures/motifOnlyImpMatrix.png")
> ggplot(data=df.sum, aes(x=reorder(Feature, Gain), y=Gain)) +
+     geom_bar(stat="identity") +
+     coord_flip() +
+     theme_minimal(base_size = 30) +
+     labs(x = "Feature", y="Gain")
> dev.off()
null device 
          1 
> 
> # Create stats for GBM
> medium_pred_df <- make.pred.df.from.model(gbdt_medium, X_test, y_test)
> colnames(medium_pred_df)[1] <- "ChIPseq.bound"
> medium_stat_df <- make.stats.df.from.preds(medium_pred_df)
> 
> 
> # MODEL 2: Full Linear Model
> X_train_lin <- X_train
> y_train_lin <- y_train
> X_test_lin  <- X_test
> y_test_lin  <- y_test
> 
> tf.regressors <- colnames(X_train_lin)[colnames(X_train_lin) %in% unique(motif.class$class)]
> non.tf.regressors <-  colnames(X_train_lin)[!colnames(X_train_lin) %in% unique(motif.class$class)]
> 
> tf.regressors.formula <- paste("as.factor(", paste(tf.regressors, collapse=") + as.factor("), ")")
> non.tf.regressors.formula <- paste(non.tf.regressors, collapse=" + ")
> all.regressors.formula <- paste(non.tf.regressors.formula, tf.regressors.formula, sep=" + ")
> 
> glm.formula <- paste("ChIPseq.bound ~ ", all.regressors.formula, sep='')
> 
> glm.df.train <- as.data.frame(cbind(y_train_lin, X_train_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
> glm.df.test <-  as.data.frame(cbind(y_test_lin, X_test_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
> 
> glm.all <- glm(as.formula(glm.formula), data=glm.df.train, family=binomial)
> glm.all$Model.Name <- "glm small"
> 
> # Create stats for Full Linear Model
> glm.pred.df <- make.pred.df.from.glm(glm.all, glm.df.test)
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = ifelse(type ==  :
  prediction from a rank-deficient fit may be misleading
> glm.stat.df <- make.stats.df.from.preds(glm.pred.df)
> 
> 
> # MODEL 3: Individual Linear Models
> stats.regressors.df <- data.frame()
> 
> for (this.regressor in colnames(X_train_lin)) {
+ 
+     if (this.regressor %in% unique(motif.class$class)) {
+         glm.formula <- paste("ChIPseq.bound ~ ", "as.factor(", this.regressor, ")",sep='')
+     } else {
+         glm.formula <- paste("ChIPseq.bound ~ ", this.regressor,sep='')
+     }
+ 
+     glm.df.train <- as.data.frame(cbind(y_train_lin, X_train_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
+     glm.df.test <-  as.data.frame(cbind(y_test_lin, X_test_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
+ 
+     # Make the model
+     glm.single <- glm(as.formula(glm.formula), data=glm.df.train, family=binomial)
+     glm.single$Model.Name <- paste("glm ", this.regressor, sep='')
+ 
+     # Create the stats
+     glm.pred.single.df <- make.pred.df.from.glm(glm.single, glm.df.test)
+     glm.stat.single.df <- make.stats.df.from.preds(glm.pred.single.df)
+ 
+     stats.regressors.df <- rbind(stats.regressors.df, glm.stat.single.df)
+ 
+ }
> 
> stats.regressors.df %>%
+     filter(Model.Name %in% c("glm motifscore",
+                              "glm gc_content",
+                              "glm asinh_tss_dist")) ->
+     stats.regressors.filtered.df
> 
> # Compare performance using 3 figures:
> all.stats.df <- rbind(
+     medium_stat_df,
+     glm.stat.df,
+     stats.regressors.filtered.df
+     )
> 
> # Save the "all.stats.df" for later
> save(all.stats.df, file = "/ssd/mrichard/data/motifOnlyAllStats.10M.Rdata")
> 
> # MCC curves
> png("../figures/motifOnlyMCC.png")
> plot.mattcc.curve(all.stats.df) + theme_minimal(base_size = 15)
> dev.off()
null device 
          1 
> 
> 
> # ROC curves
> png("../figures/motifOnlyROC.png")
> plot.roc.curve(all.stats.df) + theme_minimal(base_size = 15)
> dev.off()
null device 
          1 
> 
> 
> # Precision-Recall curves
> png("../figures/motifOnlyPreRec.png")
> plot.precrecall.curve(all.stats.df) + theme_minimal(base_size = 15)
Warning message:
Removed 50 rows containing missing values (geom_path). 
> dev.off()
null device 
          1 
> 

R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Load all libraries and functions
> 
> libs <- c(
+     'RColorBrewer',
+     'ggplot2',
+     'xgboost',
+     'glmnet',
+     'dplyr',
+     'tidyr',
+     'pROC',
+     'ROCR',
+     'stringr',
+     'caret',
+     'caTools',
+     'fst'
+ )
> 
> for (lib in libs) {
+     if (!require(lib, character.only = TRUE, quietly = TRUE)) {
+         install.packages(lib, repos='http://cran.us.r-project.org')
+     }
+ }
Loaded glmnet 2.0-12


Attaching package: ‘dplyr’

The following object is masked from ‘package:xgboost’:

    slice

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘tidyr’

The following object is masked from ‘package:Matrix’:

    expand

Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following object is masked from ‘package:glmnet’:

    auc

The following objects are masked from ‘package:stats’:

    cov, smooth, var


Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> 
> (.packages())
 [1] "fst"          "caTools"      "caret"        "lattice"      "stringr"     
 [6] "ROCR"         "gplots"       "pROC"         "tidyr"        "dplyr"       
[11] "glmnet"       "foreach"      "Matrix"       "xgboost"      "ggplot2"     
[16] "RColorBrewer" "stats"        "graphics"     "grDevices"    "utils"       
[21] "datasets"     "methods"      "base"        
> 
> source("../my_R_functions/utility_functions.R")
> source("../my_R_functions/stat_functions.R")
> source("../my_R_functions/plot_functions.R")
> source("/ssd/mrichard/github/BDDS/trenadb/src/utils.R")
Loading required package: DBI
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:dplyr’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:Matrix’:

    colMeans, colSums, rowMeans, rowSums, which

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colMeans, colnames,
    colSums, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, lengths, Map, mapply, match,
    mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rowMeans, rownames, rowSums, sapply, setdiff, sort,
    table, tapply, union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:caTools’:

    runmean

The following object is masked from ‘package:gplots’:

    space

The following object is masked from ‘package:tidyr’:

    expand

The following objects are masked from ‘package:dplyr’:

    first, rename

The following object is masked from ‘package:Matrix’:

    expand

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges

Attaching package: ‘IRanges’

The following objects are masked from ‘package:dplyr’:

    collapse, desc, slice

The following object is masked from ‘package:xgboost’:

    slice

Loading required package: GenomeInfoDb
> source("/ssd/mrichard/github/BDDS/footprints/testdb/src/dbFunctions.R")
> 
> # Load the motif data and the big dataset, plus make the names better
> load("../Rdata_files/motif_class_pairs.Rdata")
> #load("/ssd/mrichard/data/joined.annotated.9.Rdata") # Takes ~2 min to load
> all.TF.df.fimo.hint.well.annotated <- read.fst("/ssd/mrichard/data/joined.annotated.10M.Rdata")
> colnames(all.TF.df.fimo.hint.well.annotated) <- make.names(colnames(all.TF.df.fimo.hint.well.annotated), unique=TRUE)
> 
> # Filter the entries w/o fp or hits
> all.TF.df.fimo.hint.well.annotated %>%
+     filter(h_max_score_16 > 3.6 | h_max_score_20 > 3.6 | w_min_score_16 < -2.3 | w_min_score_20 < -2.3) ->
+     df_only_footprint_hits
> 
> 
> # Remove columns we don't need for this part, then drop the original data
> # Include the HINT/Wellington columns
> cols_to_drop <- c('motifname', 'chrom', 'strand', 'loc',
+                   'h_frac_16', 'h_frac_20', 'h_max_score_16', 'h_max_score_20',
+                   'w_frac_16', 'w_frac_20', 'w_min_score_16', 'w_min_score_20')
> 
> df_only_footprint_hits %>%
+     filter(chrom %in% c("2","4")) %>%
+     select(-one_of(cols_to_drop)) ->
+     val_df
> 
> df_only_footprint_hits %>%
+     filter(chrom %in% c("1","3","5")) %>%
+     select(-one_of(cols_to_drop)) ->
+     test_df
> 
> df_only_footprint_hits %>%
+     filter(!(chrom %in% c("1","2","3","4","5"))) %>%
+     select(-one_of(cols_to_drop)) ->
+     train_df
> 
> remove(df_only_footprint_hits, all.TF.df.fimo.hint.well.annotated)
> 
> # Divide into train/test/validation sets and split X/Y
> val_df %>%
+     select(-cs_hit) %>%
+     as.matrix ->
+     X_val
> 
> val_df %>%
+     select(cs_hit) %>%
+     as.matrix ->
+     y_val
> 
> test_df %>%
+     select(-cs_hit) %>%
+     as.matrix ->
+     X_test
> 
> test_df %>%
+     select(cs_hit) %>%
+     as.matrix ->
+     y_test
> 
> train_df %>%
+     select(-cs_hit) %>%
+     as.matrix ->
+     X_train
> 
> train_df %>%
+     select(cs_hit) %>%
+     as.matrix ->
+     y_train
> 
> remove(val_df, test_df, train_df)
> 
> # MODEL 1: GBM
> param <- list("objective" = "binary:logistic",
+               "max.depth" = 7,
+               "eta" = 0.005,
+               "eval.metric" = "auc"
+               )
> 
> gbdt_medium <- xgboost(
+             params = param,
+             data = X_train,
+             label = y_train,
+             nround = 200,
+             verbose = FALSE,
+             missing = NA
+         )
> 
> gbdt_medium$Model.Name <- "trees with classes"
> xgb.save(gbdt_medium, "../saved_models/xgboost_TF_site_predict_motif_only.10M.filtered.model")
[1] TRUE
> 
> # Create importance matrix plot
> motif.class$class <- lapply(motif.class$class, make.names, unique=TRUE)
> importance_matrix <- xgb.importance(colnames(X_train),model=gbdt_medium)
> df <- as_data_frame(importance_matrix)
> df.tf <- subset(df, Feature %in% unique(motif.class$class))
> df.notf <- subset(df, !(Feature %in% unique(motif.class$class)))
> tfclass.row <- c("TF_class", unname(as.list(colSums(df.tf[!(colnames(df.tf) %in% c("Feature"))]))) )
> names(tfclass.row) <- colnames(df)
> df.sum <- rbind(df.notf,tfclass.row)
> 
> 
> png("../figures/motifOnlyImpMatrix.filtered.png")
> ggplot(data=df.sum, aes(x=reorder(Feature, Gain), y=Gain)) +
+     geom_bar(stat="identity") +
+     coord_flip() +
+     theme_minimal(base_size = 30) +
+     labs(x = "Feature", y="Gain")
> dev.off()
null device 
          1 
> 
> # Create stats for GBM
> medium_pred_df <- make.pred.df.from.model(gbdt_medium, X_test, y_test)
> colnames(medium_pred_df)[1] <- "ChIPseq.bound"
> medium_stat_df <- make.stats.df.from.preds(medium_pred_df)
> 
> 
> # MODEL 2: Full Linear Model
> X_train_lin <- X_train
> y_train_lin <- y_train
> X_test_lin  <- X_test
> y_test_lin  <- y_test
> 
> tf.regressors <- colnames(X_train_lin)[colnames(X_train_lin) %in% unique(motif.class$class)]
> non.tf.regressors <-  colnames(X_train_lin)[!colnames(X_train_lin) %in% unique(motif.class$class)]
> 
> tf.regressors.formula <- paste("as.factor(", paste(tf.regressors, collapse=") + as.factor("), ")")
> non.tf.regressors.formula <- paste(non.tf.regressors, collapse=" + ")
> all.regressors.formula <- paste(non.tf.regressors.formula, tf.regressors.formula, sep=" + ")
> 
> glm.formula <- paste("ChIPseq.bound ~ ", all.regressors.formula, sep='')
> 
> glm.df.train <- as.data.frame(cbind(y_train_lin, X_train_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
> glm.df.test <-  as.data.frame(cbind(y_test_lin, X_test_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
> 
> glm.all <- glm(as.formula(glm.formula), data=glm.df.train, family=binomial)
> glm.all$Model.Name <- "glm small"
> 
> # Create stats for Full Linear Model
> glm.pred.df <- make.pred.df.from.glm(glm.all, glm.df.test)
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = ifelse(type ==  :
  prediction from a rank-deficient fit may be misleading
> glm.stat.df <- make.stats.df.from.preds(glm.pred.df)
> 
> 
> # MODEL 3: Individual Linear Models
> stats.regressors.df <- data.frame()
> 
> for (this.regressor in colnames(X_train_lin)) {
+ 
+     if (this.regressor %in% unique(motif.class$class)) {
+         glm.formula <- paste("ChIPseq.bound ~ ", "as.factor(", this.regressor, ")",sep='')
+     } else {
+         glm.formula <- paste("ChIPseq.bound ~ ", this.regressor,sep='')
+     }
+ 
+     glm.df.train <- as.data.frame(cbind(y_train_lin, X_train_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
+     glm.df.test <-  as.data.frame(cbind(y_test_lin, X_test_lin)) %>% rename("cs_hit" = "ChIPseq.bound")
+ 
+     # Make the model
+     glm.single <- glm(as.formula(glm.formula), data=glm.df.train, family=binomial)
+     glm.single$Model.Name <- paste("glm ", this.regressor, sep='')
+ 
+     # Create the stats
+     glm.pred.single.df <- make.pred.df.from.glm(glm.single, glm.df.test)
+     glm.stat.single.df <- make.stats.df.from.preds(glm.pred.single.df)
+ 
+     stats.regressors.df <- rbind(stats.regressors.df, glm.stat.single.df)
+ 
+ }
> 
> stats.regressors.df %>%
+     filter(Model.Name %in% c("glm motifscore",
+                              "glm gc_content",
+                              "glm asinh_tss_dist")) ->
+     stats.regressors.filtered.df
> 
> # Compare performance using 3 figures:
> all.stats.df <- rbind(
+     medium_stat_df,
+     glm.stat.df,
+     stats.regressors.filtered.df
+     )
> 
> # Save the "all.stats.df" for later
> save(all.stats.df, file = "/ssd/mrichard/data/motifOnlyAllStats.10M.filtered.Rdata")
> 
> # MCC curves
> png("../figures/motifOnlyMCC.filtered.png")
> plot.mattcc.curve(all.stats.df) + theme_minimal(base_size = 15)
> dev.off()
null device 
          1 
> 
> 
> # ROC curves
> png("../figures/motifOnlyROC.filtered.png")
> plot.roc.curve(all.stats.df) + theme_minimal(base_size = 15)
> dev.off()
null device 
          1 
> 
> 
> # Precision-Recall curves
> png("../figures/motifOnlyPreRec.filtered.png")
> plot.precrecall.curve(all.stats.df) + theme_minimal(base_size = 15)
Warning message:
Removed 48 rows containing missing values (geom_path). 
> dev.off()
null device 
          1 
> 
